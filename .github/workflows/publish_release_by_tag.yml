#file: noinspection Annotator
name: Publish Release By Tag
run-name: ${{ github.workflow }} ${{ inputs.releaseTag }} ${{ github.event.repository.updated_at}}
on:
  workflow_dispatch:
    inputs:
      releaseTag:
        description: Release Tag
        required: true
        type: choice
        options:
          - v2.0.0
          - v1.8.0
          - v1.7.5
          - v1.7.2
          - v1.7.1
          - v1.7.0
          - v1.6.7
          - v1.6.6
          - v1.6.5
          - v1.6.0
          - v1.5.1
          - v1.5.0
          - v1.4.5
          - v1.4.0
          - v1.3.8
          - v1.3.7
          - v1.3.6
          - v1.3.5
          - v1.3.4
          - v1.3.3
          - v1.3.2
          - v1.3.1
          - v1.3
          - v1.2.8
          - v1.2.7
          - v1.2.6
          - v1.2.5
          - v1.2
          - v1.1.1
          - v1.1
          - v1.0

permissions: { }

jobs:
  publish-release-by-tag:
    name: Publish Release By Tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Tag ${{ inputs.releaseTag }}
        uses: actions/checkout@v4
        with:
          ref: refs/tags/${{ inputs.releaseTag }}

      - name: Create local.properties
        run: |
          echo ${{ secrets.SIGNING_KEY }} | base64 -d > release_keystore.jks

          keystoreFile=$(realpath release_keystore.jks)

          echo "keystoreFile: $keystoreFile"

          echo "storePassword=${{ secrets.KEY_STORE_PASSWORD }}" >> local.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> local.properties
          echo "keyAlias=release_key" >> local.properties
          echo "storeFile=$keystoreFile" >> local.properties

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: 21

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2.1.3

      - name: Build APKs
        run: |
          ls
          bash gradlew app:assembleRelease

      - name: Get Release APK Name
        run: |
          releaseApk=$(find app/build/outputs/apk/release/*.apk)
          echo $releaseApk
          echo ARTIFACT_NAME=$(basename $releaseApk) >> $GITHUB_ENV
          echo ARTIFACT_PATH=$releaseApk >> $GITHUB_ENV

      - name: Create Artifact ${{ env.ARTIFACT_NAME }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}
          if-no-files-found: error

      - name: Get Commit Message
        run: |
          gitTopLevel="$(git rev-parse --show-toplevel)"
          versionCodeFilter="\(versionCode\s\+=\s\+\)\([[:digit:]]\+\)"
          versionCode=$(git show "$tag:app/build.gradle.kts" | grep versionCode | sed -e "s/$versionCodeFilter/\2/" | xargs)
          
          cat "$gitTopLevel/fastlane/metadata/android/en-US/changelogs/$versionCode.txt"
          
          {
              echo 'COMMIT_MESSAGE<<EOF'
              cat "$gitTopLevel/fastlane/metadata/android/en-US/changelogs/$versionCode.txt"
              echo EOF
          } >> $GITHUB_ENV

      - name: Publish Release ${{ github.ref_name }}
        uses: svenstaro/upload-release-action@v2
        with:
          file: ${{ env.ARTIFACT_PATH }}
          tag: refs/tags/${{ inputs.releaseTag }}
          draft: false
          overwrite: true
          promote: true
          make_latest: true
          body: ${{ env.COMMIT_MESSAGE }}
          release_name: ${{ inputs.releaseTag }}
          repo_token: ${{ secrets.RELEASE_GITHUB_TOKEN }}